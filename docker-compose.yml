services:  # Início da definição dos serviços que serão executados em contêineres.

  zookeeper:  # Nome do serviço Zookeeper.
    image: confluentinc/cp-zookeeper:latest  # Imagem do Zookeeper a ser usada.
    ports:  # Mapeamento de portas do contêiner para o host.
      - "2181:2181"  # Porta padrão do Zookeeper.
    networks:  # Definição das redes a que o serviço pertence.
      - app-network  # Nome da rede para o serviço.
    volumes:  # Mapeamento de volumes para persistência de dados.
      - zookeeper-data:/var/lib/zookeeper/data  # Volume para dados do Zookeeper.
      - ./zoo.cfg:/etc/zookeeper/zoo.cfg  # Arquivo de configuração do Zookeeper.
    environment:  # Variáveis de ambiente para configuração do Zookeeper.
      ZOOKEEPER_CLIENT_PORT: 2181  # Porta de cliente do Zookeeper.
      ZOOKEEPER_TICK_TIME: 2000  # Intervalo de tempo entre ticks do Zookeeper.
    healthcheck:  # Verificação de saúde do serviço.
      test: ["CMD", "echo", "ruok"]  # Comando para verificar se o Zookeeper está em funcionamento.
      interval: 5s  # Intervalo entre verificações.
      timeout: 5s  # Tempo máximo para a verificação.
      retries: 3  # Número de tentativas antes de considerar o serviço como inativo.

  kafka:  # Nome do serviço Kafka.
    image: confluentinc/cp-kafka:latest  # Imagem do Kafka a ser usada.
    ports:  # Mapeamento de portas do contêiner para o host.
      - "9092:9092"  # Porta padrão do Kafka.
    networks:  # Definição das redes a que o serviço pertence.
      - app-network  # Nome da rede para o serviço.
    volumes:  # Mapeamento de volumes para persistência de dados.
      - kafka-data:/var/lib/kafka/data  # Volume para dados do Kafka.
    environment:  # Variáveis de ambiente para configuração do Kafka.
      KAFKA_BROKER_ID: 1  # ID do broker Kafka.
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181  # Conexão do Kafka com o Zookeeper.
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092  # Endereço em que o Kafka escuta.
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092  # Endereço que será usado para se conectar ao broker.
      KAFKA_LOG_DIRS: /var/lib/kafka/data  # Diretório onde os logs do Kafka são armazenados.
    depends_on:  # Dependências do serviço Kafka.
      zookeeper:  # O Kafka depende do Zookeeper.
        condition: service_healthy  # Kafka só iniciará se o Zookeeper estiver saudável.
    healthcheck:  # Verificação de saúde do serviço.
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server=kafka:9092"]  # Comando para verificar o estado do Kafka.
      interval: 10s  # Intervalo entre verificações.
      timeout: 5s  # Tempo máximo para a verificação.
      retries: 5  # Número de tentativas antes de considerar o serviço como inativo.

  db:  # Nome do serviço PostgreSQL.
    image: postgres:13  # Imagem do PostgreSQL a ser usada.
    environment:  # Variáveis de ambiente para configuração do PostgreSQL.
      POSTGRES_USER: postgres  # Nome de usuário do banco de dados.
      POSTGRES_PASSWORD: postgres  # Senha do banco de dados.
      POSTGRES_DB: sales_db  # Nome do banco de dados a ser criado.
    ports:  # Mapeamento de portas do contêiner para o host.
      - "5432:5432"  # Porta padrão do PostgreSQL.
    networks:  # Definição das redes a que o serviço pertence.
      - app-network  # Nome da rede para o serviço.
    volumes:  # Mapeamento de volumes para persistência de dados.
      - postgres-data:/var/lib/postgresql/data  # Volume para dados do PostgreSQL.

  producer:  # Nome do serviço produtor.
    build: ./producer  # Caminho para o Dockerfile do produtor.
    depends_on:  # Dependências do serviço produtor.
      kafka:  # O produtor depende do Kafka.
        condition: service_healthy  # O produtor só iniciará se o Kafka estiver saudável.
    environment:  # Variáveis de ambiente para configuração do produtor.
      KAFKA_BROKER: kafka:9092  # Endereço do broker Kafka.
      KAFKA_TOPIC: sales  # Tópico Kafka onde os dados serão enviados.
    networks:  # Definição das redes a que o serviço pertence.
      - app-network  # Nome da rede para o serviço.

  consumer:  # Nome do serviço consumidor.
    build: ./consumer  # Caminho para o Dockerfile do consumidor.
    depends_on:  # Dependências do serviço consumidor.
      kafka:  # O consumidor depende do Kafka.
        condition: service_healthy  # O consumidor só iniciará se o Kafka estiver saudável.
      db:  # O consumidor também depende do banco de dados.
        condition: service_started  # O consumidor só iniciará se o banco de dados estiver em execução.
    environment:  # Variáveis de ambiente para configuração do consumidor.
      KAFKA_BROKER: kafka:9092  # Endereço do broker Kafka.
      KAFKA_TOPIC: sales  # Tópico Kafka do qual os dados serão consumidos.
      POSTGRES_HOST: db  # Host do banco de dados PostgreSQL.
      POSTGRES_USER: postgres  # Nome de usuário do banco de dados.
      POSTGRES_PASSWORD: postgres  # Senha do banco de dados.
      POSTGRES_DB: sales_db  # Nome do banco de dados a ser usado.
    networks:  # Definição das redes a que o serviço pertence.
      - app-network  # Nome da rede para o serviço.

  streamlit:  # Nome do serviço Streamlit.
    build: ./streamlit  # Caminho para o Dockerfile do Streamlit.
    ports:  # Mapeamento de portas do contêiner para o host.
      - "8501:8501"  # Porta padrão do Streamlit.
    depends_on:  # Dependências do serviço Streamlit.
      db:  # O Streamlit depende do banco de dados.
        condition: service_started  # O Streamlit só iniciará se o banco de dados estiver em execução.
    networks:  # Definição das redes a que o serviço pertence.
      - app-network  # Nome da rede para o serviço.

networks:  # Definição das redes a serem utilizadas pelos serviços.
  app-network:  # Nome da rede personalizada.
    driver: bridge  # Tipo de driver da rede (bridge é o padrão).

volumes:  # Definição de volumes persistentes.
  zookeeper-data:  # Nome do volume para dados do Zookeeper.
    driver: local  # Tipo de driver do volume (local para armazenamento no host).
  kafka-data:  # Nome do volume para dados do Kafka.
    driver: local  # Tipo de driver do volume (local para armazenamento no host).
  postgres-data:  # Nome do volume para dados do PostgreSQL.
    driver: local  # Tipo de driver do volume (local para armazenamento no host).
