services:  # Início da definição dos serviços que serão executados em contêineres.

  zookeeper:  # Nome do serviço Zookeeper.
    image: confluentinc/cp-zookeeper:latest  # Imagem do Zookeeper a ser usada.
    ports:
      - "2181:2181"
    networks:
      - app-network
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "echo", "ruok"]
      interval: 5s
      timeout: 5s
      retries: 3

  kafka:  # Nome do serviço Kafka.
    image: confluentinc/cp-kafka:latest
    ports:
      - "9092:9092"
    networks:
      - app-network
    volumes:
      - kafka-data:/var/lib/kafka/data
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
      KAFKA_LOG_DIRS: /var/lib/kafka/data
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server=kafka:9092"]
      interval: 10s
      timeout: 5s
      retries: 5

  spark-master:
    build: ./spark_streaming
    environment:
      - SPARK_MODE=master
      - SPARK_MASTER_URL=spark://spark-master:7077
      - POSTGRES_HOST=db
      - POSTGRES_PORT=5432
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=sales_db
      - KAFKA_BROKER=kafka:9092  # Adicionando a variável KAFKA_BROKER
      - KAFKA_TOPIC=sales  # Definindo a variável KAFKA_TOPIC
    ports:
      - "7077:7077"
      - "8080:8080"
    networks:
      - app-network
    depends_on:
      kafka:  # Adicionando dependência do Kafka
        condition: service_healthy
      db:  # Adicionando dependência do banco de dados
        condition: service_healthy  # Espera até que o db esteja saudável
    command: "spark-submit --master spark://spark-master:7077 --jars /path/to/postgresql-42.2.20.jar /app/spark_streaming.py"

  db:  # Nome do serviço PostgreSQL.
    image: postgres:13
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: sales_db
    ports:
      - "5432:5432"
    networks:
      - app-network
    volumes:
      - postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  producer:  # Nome do serviço produtor.
    build: ./producer
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BROKER: kafka:9092
      KAFKA_TOPIC: sales
    networks:
      - app-network

  streamlit:  # Nome do serviço Streamlit.
    build: ./streamlit
    ports:
      - "8501:8501"
    depends_on:
      db:
        condition: service_started
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  zookeeper-data:
    driver: local
  kafka-data:
    driver: local
  postgres-data:
    driver: local
